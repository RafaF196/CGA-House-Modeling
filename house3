def prod_rules(block):
    obj = bpy.data.objects[block.id]
    tag = block.tag
    
    # Edit this to generate the rules
    # if tag -> return Succesor
    # Operations available: "extrude_face", "subdivide", "add_prefab"
    
    ##############################################
    
    # House 3
    if layer == 1:
        if tag == 'L':
            return extrude_face(obj, 4, [2.4, 2.8], 'B')
        if tag == 'B':
            add_prefab(obj, "fence", 1, 0, 'N', "bricks")
            add_prefab(obj, "fence", 1, 1, 'N', "bricks")
            add_prefab(obj, "fence", 1, 3, 'N', "bricks")
            add_prefab(obj, "roof4", 1, 4, 'N', "blackstone")
            rng = random.uniform(0.0, 1.0)
            return subdivide(obj, 0, [['R', 2], ['R', 1]], ['RIGHT', 'LEFT'], "quartz")
        if tag == 'LEFT':
            return subdivide(obj, 2, [['R', 1.5], ['R', 1]], ['G', 'W3'], "quartz")
        if tag == 'RIGHT':
            add_prefab(obj, "roof2", 0.9, 4, 'N', "blackstone")
            return subdivide(obj, 0, [['R', 2], ['R', 1]], ['R2', 'M'], "quartz")
        if tag == 'R2':
            return subdivide(obj, 2, [['R', 1.5], ['R', 1]], ['LS', 'W3'], "quartz")
        if tag == 'M':
            return subdivide(obj, 2, [['R', 1], ['R', 0.2], ['R', 1]], ['D', 'EF', 'W'], "blackstone")
        if tag == 'EF':
            return extrude_face(obj, 2, [0.5, 1.0], 'N')
        if tag == 'G':
            return add_prefab(obj, "garage", 0.5, 2, 'N', "metal")
        if tag == 'D':
            return add_prefab(obj, "door", 1, 2, 'N', "concrete")
        if tag == 'W':
            return add_prefab(obj, "window5", 0.5, 2, 'N', "blackstone")
        if tag == 'W2':
            return add_prefab(obj, "window6", 0.5, 2, 'N', "blackstone")
        if tag == 'W3':
            rng = random.uniform(0.0, 1.0)
            if rng < 0.5:
                return subdivide(obj, 0, [['R', 1], ['R', 4], ['R', 1]], ['N', 'W', 'N'], "quartz")
            else:
                return subdivide(obj, 0, [['R', 1], ['R', 4], ['R', 1]], ['N', 'W2', 'N'], "quartz")
        if tag == 'LS':
            return subdivide(obj, 0, [['R', 1], ['R', 4], ['R', 2]], ['N', 'W', 'N'], "quartz")
            
    if layer == 2:
        if tag == 'LS':
            add_prefab(obj, "lshape", 0.8, 2, 'W3', "stone")
    
    ##############################################
    
    return [] # tag N
