def prod_rules(block):
    obj = bpy.data.objects[block.id]
    tag = block.tag
    
    # Edit this to generate the rules
    # if tag -> return Succesor
    # Operations available: "extrude_face", "subdivide", "add_prefab"
    
    ##############################################
    
    # House 1
    if layer == 1:
        if tag == 'L':
            return extrude_face(obj, 4, [2.5, 3.0], 'B')
        if tag == 'B':
            add_prefab(obj, "fence", 1, 0, 'N', "bricks")
            add_prefab(obj, "fence", 1, 1, 'N', "bricks")
            add_prefab(obj, "fence", 1, 3, 'N', "bricks")
            rng = random.uniform(0.0, 1.0)
            if rng < 0.3:
                return subdivide(obj, 0, [['R', 2], [0.5, 0.7], ['R', 1]], ['F', 'C', 'EF'], "marble")
            elif rng < 0.6:
                return subdivide(obj, 0, [['R', 1], ['R', 2], [0.5, 0.7]], ['EF', 'F', 'C'], "marble")
            else:
                return subdivide(obj, 0, [['R', 1], [0.5, 0.7], ['R', 2]], ['EF', 'C', 'F'], "marble")
        if tag == 'EF':
            return extrude_face(obj, 2, [1.5, 2.0], 'F')
        if tag == 'C':
            return add_prefab(obj, "chimeney", 1, 2, 'N', "bricks")
        if tag == 'F':
            return subdivide(obj, 2, [[1.2, 1.5], ['R', 1]], ['FL', 'FL'], "marble")
        if tag == 'FL':
            rng = random.uniform(0.0, 1.0)
            if rng < 0.5:
                return subdivide(obj, 0, [['R', 0.5], ['R', 0.6], ['R', 0.5]], ['W','W','W'], "marble")
            else:
                return subdivide(obj, 0, [['R', 0.5], ['R', 0.6], ['R', 0.5]], ['W2','W2','W2'], "marble")
        if tag == 'W':
            return add_prefab(obj, "window", 0.5, 2, 'N', "wood")
        if tag == 'W2':
            return add_prefab(obj, "window2", 0.5, 2, 'N', "wood")
    
    if layer == 2:
        if tag == 'B':
            return subdivide(obj, 2, [['R', 1], [0.15, 0.2], ['R', 1]], ['CB', 'CO', 'N'], "marble")
        if tag == 'CB':
            return subdivide(obj, 0, [[0.15, 0.2], ['R', 1], [0.15, 0.2]], ['CO', 'N', 'CO'], "marble")
        if tag == 'CO':
            return extrude_face(obj, 2, [1.5, 1.6], 'N')
    
    ##############################################
    
    return [] # tag N
